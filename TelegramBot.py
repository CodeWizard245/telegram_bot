import json
import os
import logging
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'financial_data.json'

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    default_data = {
        'categories': {},
        'rentals': []
    }

    if not os.path.exists(DATA_FILE):
        save_data(default_data)
        return default_data

    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as file:
            if os.stat(DATA_FILE).st_size == 0:
                save_data(default_data)
                return default_data

            data = json.load(file)
            if isinstance(data.get('categories'), list):
                data['categories'] = {cat: {"profit": 0, "expense": 0, "income": 0} for cat in data['categories']}
                save_data(data)
            return data
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        save_data(default_data)
        return default_data

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=2)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def validate_datetime_format(dt_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ 14:06-11.07.25"""
    pattern = r'^\d{2}:\d{2}-\d{2}\.\d{2}\.\d{2}$'
    if not re.match(pattern, dt_str):
        return False

    try:
        time_part, date_part = dt_str.split('-')
        day, month, year = map(int, date_part.split('.'))
        hour, minute = map(int, time_part.split(':'))
        full_year = 2000 + year
        datetime(year=full_year, month=month, day=day, hour=hour, minute=minute)
        return True
    except (ValueError, AttributeError):
        return False

async def check_rental_end_times(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    data = load_data()
    now = datetime.now()

    for rental in data['rentals']:
        try:
            if rental.get('notified', False):
                continue

            time_part, date_part = rental['end_time'].split('-')
            day, month, year = map(int, date_part.split('.'))
            hour, minute = map(int, time_part.split(':'))
            end_dt = datetime(2000 + year, month, day, hour, minute)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –º–∏–Ω—É—Ç—ã)
            if end_dt <= now < end_dt + timedelta(minutes=1):
                message = (
                    f"‚è∞ –ê—Ä–µ–Ω–¥–∞ {rental['category']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                )

                await context.bot.send_message(
                    chat_id=context.job.chat_id,
                    text=message
                )

                rental['notified'] = True
                save_data(data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä–µ–Ω–¥—ã: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ job_queue –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    if hasattr(context, 'job_queue') and context.job_queue is not None:
        if 'job' not in context.chat_data:
            context.job_queue.run_repeating(
                check_rental_end_times,
                interval=60.0,
                first=0,
                chat_id=update.effective_chat.id,
                name=str(update.effective_chat.id)
            )
            context.chat_data['job'] = True
    else:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω python-telegram-bot[job-queue].")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JobQueue:\n"
            "pip install \"python-telegram-bot[job-queue]\"\n"
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )

    if 'action' in context.user_data:
        del context.user_data['action']
    if 'selected_category' in context.user_data:
        del context.user_data['selected_category']

    keyboard = [
        [InlineKeyboardButton("üìÇ –í—ã–±–æ—Ä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='select_category')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data='select_category_for_rental')],
        [InlineKeyboardButton("‚öôÔ∏è –î—Ä—É–≥–æ–µ", callback_data='other_options')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=reply_markup)
    else:
        query = update.callback_query
        await query.edit_message_text(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=reply_markup)

async def other_options_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π"""
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='add_category')],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data='delete_category')],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–∫–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data='select_category_to_undo')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')],
        [InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='stop_notifications')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    await query.edit_message_text(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    try:
        if query.data == 'select_category':
            await select_category_menu(update, context, mode='view')
        elif query.data == 'select_category_for_rental':
            await select_category_menu(update, context, mode='rental')
        elif query.data == 'other_options':
            await other_options_menu(update, context)
        elif query.data == 'add_category':
            context.user_data['action'] = 'add_category'
            await query.edit_message_text(text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        elif query.data == 'delete_category':
            await select_category_menu(update, context, mode='delete')
        elif query.data == 'select_category_to_undo':
            await select_category_menu(update, context, mode='undo')
        elif query.data == 'info':
            await show_info(update, context)
        elif query.data == 'stop_notifications':
            await stop_notifications(update, context)
        elif query.data.startswith('category_'):
            parts = query.data.split('_')
            category = '_'.join(parts[1:-1])
            mode = parts[-1]

            if mode == 'view':
                await show_category_stats(update, context, category)
            elif mode == 'rental':
                context.user_data['selected_category'] = category
                context.user_data['action'] = 'add_rental'
                await query.edit_message_text(
                    text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                         "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–ü] [–†] [–ù–∞—á–∞–ª–æ] [–ö–æ–Ω–µ—Ü]\n"
                         "–ì–¥–µ:\n"
                         "–ü - –ø—Ä–∏–±—ã–ª—å (—á–∏—Å–ª–æ)\n"
                         "–† - —Ä–∞—Å—Ö–æ–¥ (—á–∏—Å–ª–æ)\n"
                         "–ù–∞—á–∞–ª–æ - –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 14:06-11.07.25\n"
                         "–ö–æ–Ω–µ—Ü - –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 14:06-11.07.25\n\n"
                         "–ü—Ä–∏–º–µ—Ä: 50000 10000 14:06-11.07.25 18:00-11.07.25"
                )
            elif mode == 'delete':
                await delete_category(update, context, category)
            elif mode == 'undo':
                await show_rentals_to_undo(update, context, category)
        elif query.data.startswith('undo_'):
            rental_id = int(query.data.split('_')[1])
            await undo_rental(update, context, rental_id)
        elif query.data == 'back_to_main':
            await start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text(text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def select_category_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, mode='view'):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = load_data()
    keyboard = []

    for category in data['categories'].keys():
        if mode == 'delete':
            text = f"üóëÔ∏è {category}"
        elif mode == 'undo':
            text = f"‚Ü©Ô∏è {category}"
        else:
            text = f"üìÇ {category}"

        keyboard.append([InlineKeyboardButton(text, callback_data=f'category_{category}_{mode}')])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='other_options' if mode in ['delete',
                                                                                               'undo'] else 'back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    title = {
        'view': "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
        'rental': "‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞—Ä–µ–Ω–¥—ã",
        'delete': "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        'undo': "‚Ü©Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã"
    }.get(mode, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

    query = update.callback_query
    await query.edit_message_text(text=title, reply_markup=reply_markup)

async def show_category_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = load_data()
    rentals = [r for r in data['rentals'] if r.get('category') == category]
    total_profit = sum(r['profit'] for r in rentals)
    total_expense = sum(r['expense'] for r in rentals)
    total_income = total_profit - total_expense

    rentals_list = "\n".join(
        f"{i + 1}. {r['start_time']}-{r['end_time']} "
        f"–ü—Ä–∏–±—ã–ª—å: {r['profit']} –†–∞—Å—Ö–æ–¥: {r['expense']} –î–æ—Ö–æ–¥: {r['income']}"
        for i, r in enumerate(rentals[-5:]))

    text = (
        f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f}\n"
        f"üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expense:.2f}\n"
        f"üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income:.2f}\n\n"
        f"üìÇ –í—Å–µ–≥–æ –∞—Ä–µ–Ω–¥: {len(rentals)}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã:\n{rentals_list if rentals else '–ù–µ—Ç –∞—Ä–µ–Ω–¥'}"
    )

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='select_category')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    await query.edit_message_text(text=text, reply_markup=reply_markup)

async def show_rentals_to_undo(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –¥–ª—è –æ—Ç–∫–∞—Ç–∞"""
    data = load_data()
    rentals = [r for r in data['rentals'] if r.get('category') == category][-5:]

    if not rentals:
        await update.callback_query.edit_message_text(
            text=f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç –∞—Ä–µ–Ω–¥ –¥–ª—è –æ—Ç–∫–∞—Ç–∞."
        )
        return

    text = "‚Ü©Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –¥–ª—è –æ—Ç–∫–∞—Ç–∞:\n\n" + "\n".join(
        f"{i + 1}. {r['start_time']}-{r['end_time']} "
        f"–ü—Ä–∏–±—ã–ª—å: {r['profit']} –†–∞—Å—Ö–æ–¥: {r['expense']}"
        for i, r in enumerate(reversed(rentals)))

    keyboard = [
        [InlineKeyboardButton(f"‚Ü©Ô∏è –û—Ç–∫–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É {i + 1}",
                              callback_data=f'undo_{len(data["rentals"]) - len(rentals) + i}')]
        for i in range(len(rentals))
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='select_category_to_undo')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)

async def undo_rental(update: Update, context: ContextTypes.DEFAULT_TYPE, rental_id: int):
    """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∞—Ä–µ–Ω–¥—É"""
    data = load_data()

    try:
        rental = data['rentals'][rental_id]
        category = rental['category']

        if category in data['categories']:
            data['categories'][category]['profit'] -= rental['profit']
            data['categories'][category]['expense'] -= rental['expense']
            data['categories'][category]['income'] -= rental['income']

        del data['rentals'][rental_id]
        save_data(data)

        await update.callback_query.edit_message_text(
            text=f"‚úÖ –ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω–∞:\n\n"
                 f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                 f"–í—Ä–µ–º—è: {rental['start_time']}-{rental['end_time']}\n"
                 f"–ü—Ä–∏–±—ã–ª—å: -{rental['profit']}\n"
                 f"–†–∞—Å—Ö–æ–¥: -{rental['expense']}"
        )
    except (IndexError, KeyError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã: {e}")
        await update.callback_query.edit_message_text(
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

async def delete_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = load_data()

    if category in data['categories']:
        del data['categories'][category]
        data['rentals'] = [r for r in data['rentals'] if r.get('category') != category]
        save_data(data)

        query = update.callback_query
        await query.edit_message_text(text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã.")
    else:
        query = update.callback_query
        await query.edit_message_text(text="‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    text = (
        "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        "–ü - –ø—Ä–∏–±—ã–ª—å (–¥–æ—Ö–æ–¥ –æ—Ç –∞—Ä–µ–Ω–¥—ã)\n"
        "–† - —Ä–∞—Å—Ö–æ–¥ (–∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ)\n"
        "–ù–∞—á–∞–ª–æ - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 14:06-11.07.25\n"
        "–ö–æ–Ω–µ—Ü - –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 14:06-11.07.25\n"
        "–î - –¥–æ—Ö–æ–¥ (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∫ –ü - –†)\n\n"
        "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –∞—Ä–µ–Ω–¥—ã:\n"
        "50000 10000 14:06-11.07.25 18:00-11.07.25\n\n"
        "–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã"
    )

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='other_options')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    await query.edit_message_text(text=text, reply_markup=reply_markup)

async def stop_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if hasattr(context, 'job_queue') and context.job_queue is not None:
        current_jobs = context.job_queue.get_jobs_by_name(str(update.effective_chat.id))
        for job in current_jobs:
            job.schedule_removal()

    if 'job' in context.chat_data:
        del context.chat_data['job']

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text="üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    else:
        await update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_data = context.user_data
    text = update.message.text.strip()

    try:
        if 'action' in user_data:
            if user_data['action'] == 'add_category':
                data = load_data()
                if text not in data['categories']:
                    data['categories'][text] = {"profit": 0, "expense": 0, "income": 0}
                    save_data(data)
                    await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    await start(update, context)
                else:
                    await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
                return

            elif user_data['action'] == 'add_rental':
                if 'selected_category' not in user_data:
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    await start(update, context)
                    return

                try:
                    parts = text.split()
                    if len(parts) == 4:
                        profit = float(parts[0])
                        expense = float(parts[1])
                        start_time = parts[2]
                        end_time = parts[3]

                        if not validate_datetime_format(start_time):
                            await update.message.reply_text(
                                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 14:06-11.07.25\n"
                                "–ü—Ä–∏–º–µ—Ä: 14:06-11.07.25"
                            )
                            return

                        if not validate_datetime_format(end_time):
                            await update.message.reply_text(
                                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è!\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 14:06-11.07.25\n"
                                "–ü—Ä–∏–º–µ—Ä: 18:00-11.07.25"
                            )
                            return

                        def parse_dt(dt_str):
                            time_part, date_part = dt_str.split('-')
                            day, month, year = map(int, date_part.split('.'))
                            hour, minute = map(int, time_part.split(':'))
                            return datetime(2000 + year, month, day, hour, minute)

                        start_dt = parse_dt(start_time)
                        end_dt = parse_dt(end_time)

                        if end_dt <= start_dt:
                            await update.message.reply_text("‚ö†Ô∏è –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!")
                            return

                        category = user_data['selected_category']
                        income = profit - expense

                        data = load_data()
                        data['rentals'].append({
                            'category': category,
                            'profit': profit,
                            'expense': expense,
                            'start_time': start_time,
                            'end_time': end_time,
                            'income': income,
                            'notified': False
                        })

                        if category in data['categories']:
                            data['categories'][category]['profit'] += profit
                            data['categories'][category]['expense'] += expense
                            data['categories'][category]['income'] += income

                        save_data(data)

                        await update.message.reply_text(
                            f"‚úÖ –ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}':\n\n"
                            f"üí∞ –ü—Ä–∏–±—ã–ª—å: {profit:.2f}\n"
                            f"üí∏ –†–∞—Å—Ö–æ–¥: {expense:.2f}\n"
                            f"üíµ –î–æ—Ö–æ–¥: {income:.2f}\n"
                            f"‚è±Ô∏è –í—Ä–µ–º—è: {start_time} - {end_time}\n\n"
                            f"‚è∞ –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã"
                        )
                        await start(update, context)
                    else:
                        await update.message.reply_text(
                            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫:\n"
                            "[–ü] [–†] [–ù–∞—á–∞–ª–æ] [–ö–æ–Ω–µ—Ü]\n"
                            "–ü—Ä–∏–º–µ—Ä: 50000 10000 14:06-11.07.25 18:00-11.07.25"
                        )
                except ValueError:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                        "- –ü—Ä–∏–±—ã–ª—å (–ü) –∏ —Ä–∞—Å—Ö–æ–¥ (–†) - —á–∏—Å–ª–∞\n"
                        "- –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 14:06-11.07.25\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                    )
                return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await start(update, context)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=context.error)

    try:
        if isinstance(update, Update):
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not os.path.exists(DATA_FILE):
        save_data({'categories': {}, 'rentals': []})

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–º–µ–Ω–∏–ª–∏ YOUR_BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!
    TOKEN = '8117449778:AAFBTyihd8N4ZfiMH9IHDQ6BrUMcHU4xYGc'  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù

    if TOKEN == 'YOUR_BOT_TOKEN' or not TOKEN:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN!")
        return

    # –°–æ–∑–¥–∞–µ–º Application —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º job_queue
    application = (
        Application.builder()
        .token(TOKEN)
        .build()
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop_notifications", stop_notifications))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    application.run_polling()

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        from telegram.ext import JobQueue
        main()
    except ImportError:
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python-telegram-bot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JobQueue:")
        print('pip install "python-telegram-bot[job-queue]"')